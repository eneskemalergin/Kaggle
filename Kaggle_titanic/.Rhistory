install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages('RCurl')
install_local('./rzmq')
install_github('IRkernel/repr')
install_github('IRkernel/IRdisplay')
install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
getwd()
setwd()
setwd("/Users/eneskemalergin/Desktop/github/Kaggle_titanic/")
train.data = read.csv("train.csv", na.strings=c("NA", ""))
str(train.data)
train.data$Survived = factor(train.data$Survived)
train.data$Pclass = factor(train.data$Pclass)
str(train.data)
is.na(train.data$Age)
sum(is.na(train.data$Age) == TRUE) # Calculate how many of them
sum(is.na(train.data$Age) == TRUE) / length(train.data$Age) # Calculating Percentage of NA's
sapply(train.data, function(df) {
+ sum(is.na(df)==TRUE)/ length(df);
+ })
sapply(train.data, function(df) {sum(is.na(df)==TRUE)/ length(df);})
install.packages("Amelia")
install.packages("Amelia")
require(Amelia)
missmap(train.data, main="Missing Map")
table(train.data$Embarked, useNA = "always")
train.data$Embarked[which(is.na(train.data$Embarked))] = 'S'; # If NA then make it equal to S
table(train.data$Embarked, useNA = "always")
train.data$Name = as.character(train.data$Name)
table_words = table(unlist(strsplit(train.data$Name, "\\s+")))
sort(table_words [grep('\\.',names(table_words))],     decreasing=TRUE)
sort(table_words [grep('\\.',names(table_words))],decreasing=TRUE)
library(stringr)
tb = cbind(train.data$Age, str_match(train.data$Name, "[a-zA-Z]+\\."))
table(tb[is.na(tb[,1]),2])
install.packages(contrib.url)
install.packages("contrib.url")
mean.mr = mean(train.data$Age[grepl(" Mr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.mrs = mean(train.data$Age[grepl(" Mrs\\.", train.data$Name) & !is.na(train.data$Age)])
mean.dr = mean(train.data$Age[grepl(" Dr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.miss = mean(train.data$Age[grepl(" Miss\\.", train. data$Name) & !is.na(train.data$Age)])
mean.miss = mean(train.data$Age[grepl(" Miss\\.", train.data$Name) & !is.na(train.data$Age)])
mean.master = mean(train.data$Age[grepl(" Master\\.", train.data$Name) & !is.na(train.data$Age)])
train.data$Age[grepl(" Mr\\.", train.data$Name) & is.na(train.data$Age)] = mean.mr
train.data$Age[grepl(" Mrs\\.", train.data$Name) & is.na(train. data$Age)] = mean.mrs
train.data$Age[grepl(" Mrs\\.", train.data$Name) & is.na(train.data$Age)] = mean.mrs
train.data$Age[grepl(" Dr\\.", train.data$Name) & is.na(train.data$Age)] = mean.dr
train.data$Age[grepl(" Miss\\.", train.data$Name) & is.na(train.data$Age)] = mean.miss
train.data$Age[grepl(" Master\\.", train.data$Name) & is.na(train.data$Age)] = mean.master
# Histogram with title Passenger Survival and Perished Survived types inside
barplot(table(train.data$Survived), main="Passenger Survival",names= c("Perished", "Survived"))
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
# Barplot
barplot(table(train.data$Pclass), main="Passenger Class", names= c("first", "second", "third"))
barplot(table(train.data$Sex), main="Passenger Gender")
hist(train.data$Age, main="Passenger Age", xlab = "Age")
barplot(table(train.data$SibSp), main="Passenger Siblings")
counts = table( train.data$Survived, train.data$Sex)
barplot(counts, col=c("darkblue","red"), legend = c("Perished", "Survived"), main = "Passenger Survival by Sex")
counts = table( train.data$Survived, train.data$Pclass)
barplot(counts, col=c("darkblue","red"), legend =c("Perished", "Survived"), main= "Titanic Class Bar Plot" )
counts = table( train.data$Sex, train.data$Pclass)
barplot(counts, col=c("darkblue","red"), legend = rownames(counts), main= "Passenger Gender by Class")
hist(train.data$Age[which(train.data$Survived == "0")], main= "Passenger Age Histogram", xlab="Age", ylab="Count", col ="blue",breaks=seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "1")], col ="red", add = T, breaks=seq(0,80,by=2))
train.child = train.data$Survived[train.data$Age < 13]
length(train.child[which(train.child == 1)] ) / length(train. child)
length(train.child[which(train.child == 1)] ) / length(train.child)
train.youth = train.data$Survived[train.data$Age >= 15 & train.data$Age < 25]
length(train.youth[which(train.youth == 1)] ) / length(train.youth)
train.adult = train.data$Survived[train.data$Age >= 20 & train.data$Age < 65]
length(train.adult[which(train.adult == 1)] ) / length(train.adult)
train.senior = train.data$Survived[train.data$Age >= 65]
length(train.senior[which(train.senior == 1)] ) / length(train.senior)
split.data = function(data, p = 0.7, s = 666){
set.seed(s)
index = sample(1:dim(data)[1])
train = data[index[1:floor(dim(data)[1] * p)], ]
test = data[index[((ceiling(dim(data)[1] * p)) +1):dim(data)[1]], ]
return(list(train = train, test = test))
}
allset= split.data(train.data, p = 0.7)
trainset = allset$train
testset = allset$test
install.packages('party')
require('party')
train.ctree = ctree(Survived ~ Pclass + Sex + Age + SibSp + Fare + Parch + Embarked, data=trainset)
train.ctree
plot(train.ctree, main="Conditional inference tree of Titanic Dataset")
install.packages('e1071')
require('e1071')
svm.model = svm(Survived ~ Pclass + Sex + Age + SibSp + Fare + Parch + Embarked, data = trainset, probability = TRUE)
plot(svm.model, main = SVM for Titanic)
svm.model
require('devtools')
install_github('armstrtw/rzmq')
